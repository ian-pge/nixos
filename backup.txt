#!/usr/bin/env bash
      set -euo pipefail
      export NO_COLOR=1

      flake_dir="/etc/nixos"
      scratch="$(mktemp -d)"
      trap 'rm -rf "$scratch"' EXIT

      rsync -a --exclude='.git' "$flake_dir/" "$scratch" >/dev/null 2>&1
      cd "$scratch"

      # modern command; send **all** noise to /dev/null
      nix flake update --update-input nixpkgs >/dev/null 2>&1

      nix build ".#nixosConfigurations.$HOSTNAME.config.system.build.toplevel" \
                --no-link --out-link result-new >/dev/null 2>&1

      updates=$(nvd diff /run/current-system ./result-new | grep -c '\[U' || true)

      if [ "$updates" -eq 0 ]; then
        printf '{"text":"0","alt":"updated","tooltip":"System up‑to‑date"}\n'
        exit 0
      fi

      # Build tooltip, let jq handle escaping *and* newline → \n conversion
      tooltip=$(nvd diff /run/current-system ./result-new \
                 | grep '\[U' \
                 | awk '{for(i=3;i<NF;i++)printf $i" "; print $NF}' \
                 | jq -Rsa .)                 # gives a JSON string literal

      # tooltip already has quotes; don’t wrap again
      printf '{"text":"%s","alt":"has-updates","tooltip":%s}\n' \
             "$updates" "$tooltip"






             (writeShellScriptBin "waybar-update-checker" ''
                   #!/usr/bin/env bash
                   #
                   # Waybar module: count packages that would change after bumping nixpkgs,
                   #                without fetching substitutes or building anything.
                   #
                   set -euo pipefail
                   export NO_COLOR=1                      # nix‑diff → monochrome

                   flake_dir="/etc/nixos"                 # system flake location

                   # 1. ── work in a throw‑away copy so we never touch the real repo ─────────
                   scratch="$(mktemp -d)"
                   trap 'rm -rf "$scratch"' EXIT
                   rsync -a --exclude='.git' "$flake_dir/" "$scratch" >/dev/null
                   cd "$scratch"

                   # 2. ── update nixpkgs input in the *scratch* lock file (quietly) ─────────
                   nix flake update nixpkgs --quiet    # modern flag

                   # 3. ── ask Nix for the next system’s *derivation* only (pure eval) ──────
                   next_drv=$(nix eval --raw \
                     ".#nixosConfigurations.$HOSTNAME.config.system.build.toplevel.drvPath")

                   # 4. ── get the derivation of the running system (modern sub‑command) ────
                   cur_drv=$(nix derivation show /run/current-system | jq -r 'keys[0]')

                   # 5. ── identical hashes ⇒ system already up to date ─────────────────────
                   if [[ "$next_drv" == "$cur_drv" ]]; then
                     printf '{"text":"","alt":"updated","tooltip":"System up‑to‑date"}\n'
                     exit 0
                   fi

                   # 6. run nix‑diff (no --brief), count bullet lines for the number
                   diff=$(nix run nixpkgs#nix-diff -- /run/current-system "$next_drv")
                   changes=$(printf "%s\n" "$diff" | grep -c '^[[:space:]]*•' || true)
                   tooltip=$(printf "%s\n" "$diff" | jq -Rsa .)   # JSON‑escape for Waybar

                   printf '{"text":" %s","alt":"has-updates","tooltip":%s}\n' \
                          "$changes" "$tooltip"
                 '')






                 home.packages = with pkgs; [
                    jq # we’ll let jq escape & join lines for us

                    (writeShellScriptBin "waybar-gpu-nvidia" ''
                      #!/usr/bin/env bash
                      set -euo pipefail
                      export NO_COLOR=1

                      # Try to read util%, temp °C, used MiB, total MiB
                      if ! IFS=',' read -r util temp mem_used mem_total < <(
                             nvidia-smi --query-gpu=utilization.gpu,temperature.gpu,memory.used,memory.total \
                                        --format=csv,noheader,nounits 2>/dev/null | head -n1
                           ) || [ -z "$mem_total" ] || [ "$mem_total" -eq 0 ]; then
                        printf '{"text":"0%% 0%%","alt":"gpu-off","tooltip":"\"GPU offline\""}\n'
                        exit 0
                      fi

                      # VRAM % rounded
                      vram_pct=$(awk -v u="$mem_used" -v t="$mem_total" \
                                     'BEGIN { printf "%d", (u*100 + t/2)/t }')

                      # used VRAM GiB with one decimal
                      mem_gib=$(awk -v u="$mem_used" 'BEGIN { printf "%.1f", u/1024 }')

                      tooltip=$(printf '%s GiB used' "$mem_gib" | jq -Rsa .)

                      printf '{"text":"%s%% %s%%","alt":"gpu","tooltip":%s}\n' \
                             "$util" "$vram_pct" "$tooltip"
                    '')


                  ];
